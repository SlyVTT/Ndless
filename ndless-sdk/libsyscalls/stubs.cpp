#include <syscall-decls.h>
#include <syscall-list.h>
#include <syscall.h>

//This file has been autogenerated my mkStubs.php

extern "C" {
int savedlr_stack[10];
int savedlr_stack_nr = 0;
NUC_FILE* nuc_fopen(const char *p1, const char *p2)
{
	return syscall<e_fopen, NUC_FILE*>(p1,p2);
}
size_t nuc_fread(void *p1, size_t p2, size_t p3, NUC_FILE *p4)
{
	return syscall<e_fread, size_t>(p1,p2,p3,p4);
}
size_t nuc_fwrite(void *p1, size_t p2, size_t p3, NUC_FILE *p4)
{
	return syscall<e_fwrite, size_t>(p1,p2,p3,p4);
}
int nuc_fclose(NUC_FILE *p1)
{
	return syscall<e_fclose, int>(p1);
}
char* nuc_fgets(char *p1, int p2, NUC_FILE *p3)
{
	return syscall<e_fgets, char*>(p1,p2,p3);
}
void ascii2utf16(void *p1, const char *p2, int p3)
{
	return syscall<e_ascii2utf16, void>(p1,p2,p3);
}
int TCT_Local_Control_Interrupts(int p1)
{
	return syscall<e_TCT_Local_Control_Interrupts, int>(p1);
}
int nuc_stat(const char *p1, struct nuc_stat *p2)
{
	return syscall<e_stat, int>(p1,p2);
}
int TCC_Terminate_Task(NU_TASK *p1)
{
	return syscall<e_TCC_Terminate_Task, int>(p1);
}
int nuc_puts(const char *p1)
{
	return syscall<e_puts, int>(p1);
}
int NU_Get_First(struct dstat *p1, const char *p2)
{
	return syscall<e_NU_Get_First, int>(p1,p2);
}
int NU_Get_Next(struct dstat *p1)
{
	return syscall<e_NU_Get_Next, int>(p1);
}
void NU_Done(struct dstat *p1)
{
	return syscall<e_NU_Done, void>(p1);
}
void show_dialog_box2_(int p1, const char *p2, const char *p3, const char **p4)
{
	return syscall<e_show_dialog_box2_, void>(p1,p2,p3,p4);
}
int nuc_fseek(NUC_FILE *p1, long p2, int p3)
{
	return syscall<e_fseek, int>(p1,p2,p3);
}
int NU_Current_Dir(const char *p1, const char *p2)
{
	return syscall<e_NU_Current_Dir, int>(p1,p2);
}
int NU_Set_Current_Dir(const char *p1)
{
	return syscall<e_NU_Set_Current_Dir, int>(p1);
}
int touchpad_read(unsigned char p1, unsigned char p2, void *p3)
{
	return syscall<e_touchpad_read, int>(p1,p2,p3);
}
int touchpad_write(unsigned char p1, unsigned char p2, void *p3)
{
	return syscall<e_touchpad_write, int>(p1,p2,p3);
}
NU_TASK* TCC_Current_Task_Pointer()
{
	return syscall<e_TCC_Current_Task_Pointer, NU_TASK*>();
}
long nuc_ftell(NUC_FILE *p1)
{
	return syscall<e_ftell, long>(p1);
}
PCFD NU_Open(char *p1, uint32_t p2, uint32_t p3)
{
	return syscall<e_NU_Open, PCFD>(p1,p2,p3);
}
int NU_Close(PCFD p1)
{
	return syscall<e_NU_Close, int>(p1);
}
int NU_Truncate(PCFD p1, long int p2)
{
	return syscall<e_NU_Truncate, int>(p1,p2);
}
__attribute__((naked)) int _show_msgbox_2b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, const char **p8)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e__show_msgbox_2b));
}
__attribute__((naked)) int _show_msgbox_3b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, const char *p8, int p9, const char **p10)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e__show_msgbox_3b));
}
NUC_DIR* nuc_opendir(const char *p1)
{
	return syscall<e_opendir, NUC_DIR*>(p1);
}
struct nuc_dirent* nuc_readdir(NUC_DIR *p1)
{
	return syscall<e_readdir, struct nuc_dirent*>(p1);
}
int nuc_closedir(NUC_DIR *p1)
{
	return syscall<e_closedir, int>(p1);
}
void luaL_register(lua_State *p1, const char *p2, const luaL_Reg *p3)
{
	return syscall<e_luaL_register, void>(p1,p2,p3);
}
const char* luaL_checklstring(lua_State *p1, int p2, size_t *p3)
{
	return syscall<e_luaL_checklstring, const char*>(p1,p2,p3);
}
__attribute__((naked)) int luaL_error(lua_State *p1, const char *fmt, ...)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_luaL_error));
}
int luaL_getmetafield(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_getmetafield, int>(p1,p2,p3);
}
int luaL_callmeta(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_callmeta, int>(p1,p2,p3);
}
int luaL_typerror(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_typerror, int>(p1,p2,p3);
}
int luaL_argerror(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_argerror, int>(p1,p2,p3);
}
const char* luaL_optlstring(lua_State *p1, int p2, const char *p3, size_t *p4)
{
	return syscall<e_luaL_optlstring, const char*>(p1,p2,p3,p4);
}
lua_Number luaL_checknumber(lua_State *p1, int p2)
{
	return syscall<e_luaL_checknumber, lua_Number>(p1,p2);
}
lua_Number luaL_optnumber(lua_State *p1, int p2, lua_Number p3)
{
	return syscall<e_luaL_optnumber, lua_Number>(p1,p2,p3);
}
lua_Integer luaL_checkinteger(lua_State *p1, int p2)
{
	return syscall<e_luaL_checkinteger, lua_Integer>(p1,p2);
}
lua_Integer luaL_optinteger(lua_State *p1, int p2, lua_Integer p3)
{
	return syscall<e_luaL_optinteger, lua_Integer>(p1,p2,p3);
}
void luaL_checkstack(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_checkstack, void>(p1,p2,p3);
}
void luaL_checktype(lua_State *p1, int p2, int p3)
{
	return syscall<e_luaL_checktype, void>(p1,p2,p3);
}
void luaL_checkany(lua_State *p1, int p2)
{
	return syscall<e_luaL_checkany, void>(p1,p2);
}
int luaL_newmetatable(lua_State *p1, const char *p2)
{
	return syscall<e_luaL_newmetatable, int>(p1,p2);
}
void* luaL_checkudata(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_luaL_checkudata, void*>(p1,p2,p3);
}
void luaL_where(lua_State *p1, int p2)
{
	return syscall<e_luaL_where, void>(p1,p2);
}
int luaL_checkoption (lua_State *p1, int p2, const char *p3, const char *const p4[])
{
	return syscall<e_luaL_checkoption, int>(p1,p2,p3,p4);
}
int luaL_ref(lua_State *p1, int p2)
{
	return syscall<e_luaL_ref, int>(p1,p2);
}
void luaL_unref(lua_State *p1, int p2, int p3)
{
	return syscall<e_luaL_unref, void>(p1,p2,p3);
}
int luaL_loadfile(lua_State *p1, const char *p2)
{
	return syscall<e_luaL_loadfile, int>(p1,p2);
}
int luaL_loadbuffer(lua_State *p1, const char *p2, size_t p3, const char *p4)
{
	return syscall<e_luaL_loadbuffer, int>(p1,p2,p3,p4);
}
int luaL_loadstring(lua_State *p1, const char *p2)
{
	return syscall<e_luaL_loadstring, int>(p1,p2);
}
lua_State* luaL_newstate()
{
	return syscall<e_luaL_newstate, lua_State*>();
}
const char* luaL_gsub (lua_State *p1, const char *p2, const char *p3, const char *p4)
{
	return syscall<e_luaL_gsub, const char*>(p1,p2,p3,p4);
}
const char* luaL_findtable(lua_State *p1, int p2, const char *p3, int p4)
{
	return syscall<e_luaL_findtable, const char*>(p1,p2,p3,p4);
}
void luaL_buffinit(lua_State *p1, luaL_Buffer *p2)
{
	return syscall<e_luaL_buffinit, void>(p1,p2);
}
char* luaL_prepbuffer(luaL_Buffer *p1)
{
	return syscall<e_luaL_prepbuffer, char*>(p1);
}
void luaL_addlstring(luaL_Buffer *p1, const char *p2, size_t p3)
{
	return syscall<e_luaL_addlstring, void>(p1,p2,p3);
}
void luaL_addstring(luaL_Buffer *p1, const char *p2)
{
	return syscall<e_luaL_addstring, void>(p1,p2);
}
void luaL_addvalue(luaL_Buffer *p1)
{
	return syscall<e_luaL_addvalue, void>(p1);
}
void luaL_pushresult(luaL_Buffer *p1)
{
	return syscall<e_luaL_pushresult, void>(p1);
}
lua_State* lua_newstate(lua_Alloc p1, void *p2)
{
	return syscall<e_lua_newstate, lua_State*>(p1,p2);
}
void lua_close(lua_State *p1)
{
	return syscall<e_lua_close, void>(p1);
}
lua_State* lua_newthread(lua_State *p1)
{
	return syscall<e_lua_newthread, lua_State*>(p1);
}
lua_CFunction lua_atpanic(lua_State *p1, lua_CFunction p2)
{
	return syscall<e_lua_atpanic, lua_CFunction>(p1,p2);
}
int lua_gettop(lua_State *p1)
{
	return syscall<e_lua_gettop, int>(p1);
}
void lua_settop(lua_State *p1, int p2)
{
	return syscall<e_lua_settop, void>(p1,p2);
}
void lua_pushvalue(lua_State *p1, int p2)
{
	return syscall<e_lua_pushvalue, void>(p1,p2);
}
void lua_remove(lua_State *p1, int p2)
{
	return syscall<e_lua_remove, void>(p1,p2);
}
void lua_insert (lua_State *p1, int p2)
{
	return syscall<e_lua_insert, void>(p1,p2);
}
void lua_replace(lua_State *p1, int p2)
{
	return syscall<e_lua_replace, void>(p1,p2);
}
int lua_checkstack(lua_State *p1, int p2)
{
	return syscall<e_lua_checkstack, int>(p1,p2);
}
void lua_xmove(lua_State *p1, lua_State *p2, int p3)
{
	return syscall<e_lua_xmove, void>(p1,p2,p3);
}
int lua_isnumber(lua_State *p1, int p2)
{
	return syscall<e_lua_isnumber, int>(p1,p2);
}
int lua_isstring(lua_State *p1, int p2)
{
	return syscall<e_lua_isstring, int>(p1,p2);
}
int lua_iscfunction(lua_State *p1, int p2)
{
	return syscall<e_lua_iscfunction, int>(p1,p2);
}
int lua_isuserdata(lua_State *p1, int p2)
{
	return syscall<e_lua_isuserdata, int>(p1,p2);
}
int lua_type(lua_State *p1, int p2)
{
	return syscall<e_lua_type, int>(p1,p2);
}
const char* lua_typename(lua_State *p1, int p2)
{
	return syscall<e_lua_typename, const char*>(p1,p2);
}
int lua_equal(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_equal, int>(p1,p2,p3);
}
int lua_rawequal(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_rawequal, int>(p1,p2,p3);
}
int lua_lessthan(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_lessthan, int>(p1,p2,p3);
}
lua_Number lua_tonumber(lua_State *p1, int p2)
{
	return syscall<e_lua_tonumber, lua_Number>(p1,p2);
}
lua_Integer lua_tointeger(lua_State *p1, int p2)
{
	return syscall<e_lua_tointeger, lua_Integer>(p1,p2);
}
int lua_toboolean(lua_State *p1, int p2)
{
	return syscall<e_lua_toboolean, int>(p1,p2);
}
const char* lua_tolstring(lua_State *p1, int p2, size_t *p3)
{
	return syscall<e_lua_tolstring, const char*>(p1,p2,p3);
}
size_t lua_objlen(lua_State *p1, int p2)
{
	return syscall<e_lua_objlen, size_t>(p1,p2);
}
lua_CFunction lua_tocfunction(lua_State *p1, int p2)
{
	return syscall<e_lua_tocfunction, lua_CFunction>(p1,p2);
}
void* lua_touserdata(lua_State *p1, int p2)
{
	return syscall<e_lua_touserdata, void*>(p1,p2);
}
lua_State* lua_tothread(lua_State *p1, int p2)
{
	return syscall<e_lua_tothread, lua_State*>(p1,p2);
}
const void* lua_topointer(lua_State *p1, int p2)
{
	return syscall<e_lua_topointer, const void*>(p1,p2);
}
void lua_pushnil(lua_State *p1)
{
	return syscall<e_lua_pushnil, void>(p1);
}
void lua_pushnumber(lua_State *p1, lua_Number p2)
{
	return syscall<e_lua_pushnumber, void>(p1,p2);
}
void lua_pushinteger(lua_State *p1, lua_Integer p2)
{
	return syscall<e_lua_pushinteger, void>(p1,p2);
}
void lua_pushlstring(lua_State *p1, const char *p2, size_t p3)
{
	return syscall<e_lua_pushlstring, void>(p1,p2,p3);
}
void lua_pushstring(lua_State *p1, const char *p2)
{
	return syscall<e_lua_pushstring, void>(p1,p2);
}
__attribute__((naked)) const char* lua_pushfstring(lua_State *p1, const char *p2, ...)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_lua_pushfstring));
}
void lua_pushcclosure(lua_State *p1, lua_CFunction p2, int p3)
{
	return syscall<e_lua_pushcclosure, void>(p1,p2,p3);
}
void lua_pushboolean(lua_State *p1, int p2)
{
	return syscall<e_lua_pushboolean, void>(p1,p2);
}
void lua_gettable(lua_State *p1, int p2)
{
	return syscall<e_lua_gettable, void>(p1,p2);
}
void lua_getfield(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_lua_getfield, void>(p1,p2,p3);
}
void lua_rawget(lua_State *p1, int p2)
{
	return syscall<e_lua_rawget, void>(p1,p2);
}
void lua_rawgeti(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_rawgeti, void>(p1,p2,p3);
}
void lua_createtable(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_createtable, void>(p1,p2,p3);
}
void* lua_newuserdata(lua_State *p1, size_t p2)
{
	return syscall<e_lua_newuserdata, void*>(p1,p2);
}
int lua_getmetatable(lua_State *p1, int p2)
{
	return syscall<e_lua_getmetatable, int>(p1,p2);
}
void lua_getfenv(lua_State *p1, int p2)
{
	return syscall<e_lua_getfenv, void>(p1,p2);
}
void lua_settable (lua_State *p1, int p2)
{
	return syscall<e_lua_settable, void>(p1,p2);
}
void lua_setfield(lua_State *p1, int p2, const char *p3)
{
	return syscall<e_lua_setfield, void>(p1,p2,p3);
}
void lua_rawset(lua_State *p1, int p2)
{
	return syscall<e_lua_rawset, void>(p1,p2);
}
void lua_rawseti(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_rawseti, void>(p1,p2,p3);
}
int lua_setmetatable(lua_State *p1, int p2)
{
	return syscall<e_lua_setmetatable, int>(p1,p2);
}
int lua_setfenv(lua_State *p1, int p2)
{
	return syscall<e_lua_setfenv, int>(p1,p2);
}
void lua_call(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_call, void>(p1,p2,p3);
}
int lua_pcall(lua_State *p1, int p2, int p3, int p4)
{
	return syscall<e_lua_pcall, int>(p1,p2,p3,p4);
}
int lua_cpcall(lua_State *p1, lua_CFunction p2, void *p3)
{
	return syscall<e_lua_cpcall, int>(p1,p2,p3);
}
int lua_load(lua_State *p1, lua_Reader p2, void *p3, const char *p4)
{
	return syscall<e_lua_load, int>(p1,p2,p3,p4);
}
int lua_dump(lua_State *p1, lua_Writer p2, void *p3)
{
	return syscall<e_lua_dump, int>(p1,p2,p3);
}
int lua_yield(lua_State *p1, int p2)
{
	return syscall<e_lua_yield, int>(p1,p2);
}
int lua_resume(lua_State *p1, int p2)
{
	return syscall<e_lua_resume, int>(p1,p2);
}
int lua_status(lua_State *p1)
{
	return syscall<e_lua_status, int>(p1);
}
int lua_gc(lua_State *p1, int p2, int p3)
{
	return syscall<e_lua_gc, int>(p1,p2,p3);
}
int lua_error(lua_State *p1)
{
	return syscall<e_lua_error, int>(p1);
}
int lua_next (lua_State *p1, int p2)
{
	return syscall<e_lua_next, int>(p1,p2);
}
void lua_concat(lua_State *p1, int p2)
{
	return syscall<e_lua_concat, void>(p1,p2);
}
int lua_getstack(lua_State *p1, int p2, lua_Debug *p3)
{
	return syscall<e_lua_getstack, int>(p1,p2,p3);
}
void refresh_homescr()
{
	return syscall<e_refresh_homescr, void>();
}
void refresh_docbrowser(int p1)
{
	return syscall<e_refresh_docbrowser, void>(p1);
}
void utf162ascii(char *p1, const uint16_t *p2, int p3)
{
	return syscall<e_utf162ascii, void>(p1,p2,p3);
}
size_t utf16_strlen(const uint16_t *p1)
{
	return syscall<e_utf16_strlen, size_t>(p1);
}
__attribute__((naked)) int _show_1NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e__show_1NumericInput));
}
__attribute__((naked)) int _show_2NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8, const char *p9, int *p10, int p11, int p12, int p13)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e__show_2NumericInput));
}
int _show_msgUserInput(int p1, String *p2, const char *p3, const char *p4)
{
	return syscall<e__show_msgUserInput, int>(p1,p2,p3,p4);
}
String string_new()
{
	return syscall<e_string_new, String>();
}
void string_free(String p1)
{
	return syscall<e_string_free, void>(p1);
}
char* string_to_ascii(String p1)
{
	return syscall<e_string_to_ascii, char*>(p1);
}
void string_lower(String p1)
{
	return syscall<e_string_lower, void>(p1);
}
char string_charAt(String p1, int p2)
{
	return syscall<e_string_charAt, char>(p1,p2);
}
int string_concat_utf16(String p1, const char* p2)
{
	return syscall<e_string_concat_utf16, int>(p1,p2);
}
int string_set_ascii(String p1, const char *p2)
{
	return syscall<e_string_set_ascii, int>(p1,p2);
}
int string_set_utf16(String p1, const char *p2)
{
	return syscall<e_string_set_utf16, int>(p1,p2);
}
int string_indexOf_utf16(String p1, int p2, const char *p3)
{
	return syscall<e_string_indexOf_utf16, int>(p1,p2,p3);
}
int string_last_indexOf_utf16(String p1, int p2, const char *p3)
{
	return syscall<e_string_last_indexOf_utf16, int>(p1,p2,p3);
}
int string_compareTo_utf16(String p1, const char *p2)
{
	return syscall<e_string_compareTo_utf16, int>(p1,p2);
}
char* string_substring(String p1, String p2, int p3, int p4)
{
	return syscall<e_string_substring, char*>(p1,p2,p3,p4);
}
void string_erase(String p1, int p2)
{
	return syscall<e_string_erase, void>(p1,p2);
}
void string_truncate(String p1, int p2)
{
	return syscall<e_string_truncate, void>(p1,p2);
}
char* string_subtrsing_utf16(String p1, const char *p2, int *p3)
{
	return syscall<e_string_substring_utf16, char*>(p1,p2,p3);
}
int string_insert_replace_utf16(String p1, const char *p2, int p3, int p4)
{
	return syscall<e_string_insert_replace_utf16, int>(p1,p2,p3,p4);
}
int string_insert_utf16(String p1, const char *p2, int p3)
{
	return syscall<e_string_insert_utf16, int>(p1,p2,p3);
}
__attribute__((naked)) int string_sprintf_utf16(String p1, const char *fmt, ...)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_string_sprintf_utf16));
}
usbd_status usbd_open_pipe(usbd_interface_handle p1, uint8_t p2, uint8_t p3, usbd_pipe_handle *p4)
{
	return syscall<e_usbd_open_pipe, usbd_status>(p1,p2,p3,p4);
}
usbd_status usbd_close_pipe(usbd_pipe_handle p1)
{
	return syscall<e_usbd_close_pipe, usbd_status>(p1);
}
usbd_status usbd_transfer(usbd_xfer_handle p1)
{
	return syscall<e_usbd_transfer, usbd_status>(p1);
}
usbd_xfer_handle usbd_alloc_xfer(usbd_device_handle p1)
{
	return syscall<e_usbd_alloc_xfer, usbd_xfer_handle>(p1);
}
usbd_status usbd_free_xfer(usbd_xfer_handle p1)
{
	return syscall<e_usbd_free_xfer, usbd_status>(p1);
}
__attribute__((naked)) void usbd_setup_xfer(usbd_xfer_handle p1, usbd_pipe_handle p2, usbd_private_handle p3, void *p4, uint32_t p5, uint16_t p6, uint32_t p7, usbd_callback p8)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_setup_xfer));
}
__attribute__((naked)) void usbd_setup_isoc_xfer(usbd_xfer_handle p1, usbd_pipe_handle p2, usbd_private_handle p3, uint16_t *p4, uint32_t p5, uint16_t p6, usbd_callback p7)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_setup_isoc_xfer));
}
__attribute__((naked)) void usbd_get_xfer_status(usbd_xfer_handle p1, usbd_private_handle *p2, void **p3, uint32_t *p4, usbd_status *p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_get_xfer_status));
}
usb_endpoint_descriptor_t* usbd_interface2endpoint_descriptor(usbd_interface_handle p1, uint8_t p2)
{
	return syscall<e_usbd_interface2endpoint_descriptor, usb_endpoint_descriptor_t*>(p1,p2);
}
usbd_status usbd_abort_pipe(usbd_pipe_handle p1)
{
	return syscall<e_usbd_abort_pipe, usbd_status>(p1);
}
usbd_status usbd_clear_endpoint_stall(usbd_pipe_handle p1)
{
	return syscall<e_usbd_clear_endpoint_stall, usbd_status>(p1);
}
usbd_status usbd_endpoint_count(usbd_interface_handle p1, uint8_t *p2)
{
	return syscall<e_usbd_endpoint_count, usbd_status>(p1,p2);
}
usbd_status usbd_interface_count(usbd_device_handle p1, uint8_t *p2)
{
	return syscall<e_usbd_interface_count, usbd_status>(p1,p2);
}
usbd_status usbd_interface2device_handle(usbd_interface_handle p1, usbd_device_handle *p2)
{
	return syscall<e_usbd_interface2device_handle, usbd_status>(p1,p2);
}
usbd_status usbd_device2interface_handle(usbd_device_handle p1, uint8_t p2, usbd_interface_handle *p3)
{
	return syscall<e_usbd_device2interface_handle, usbd_status>(p1,p2,p3);
}
usbd_status usbd_pipe2device_handle(usbd_pipe_handle p1)
{
	return syscall<e_usbd_pipe2device_handle, usbd_status>(p1);
}
usbd_status usbd_sync_transfer(usbd_xfer_handle p1)
{
	return syscall<e_usbd_sync_transfer, usbd_status>(p1);
}
__attribute__((naked)) usbd_status usbd_open_pipe_intr(usbd_interface_handle p1, uint8_t p2, uint8_t p3, usbd_pipe_handle *p4, usbd_private_handle p5, void *p6, uint32_t *p8, usbd_callback p9, int p10)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_open_pipe_intr));
}
usbd_status usbd_do_request(usbd_device_handle p1, usb_device_request_t *p2, void *p3)
{
	return syscall<e_usbd_do_request, usbd_status>(p1,p2,p3);
}
__attribute__((naked)) usbd_status usbd_do_request_flags(usbd_device_handle p1, usb_device_request_t *p2, void *p3, uint16_t p4, int *p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_do_request_flags));
}
__attribute__((naked)) usbd_status usbd_do_request_flags_pipe(usbd_device_handle p1, usbd_pipe_handle p2, usb_device_request_t *p3, void *p4, uint16_t p5, int *p6)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usbd_do_request_flags_pipe));
}
usb_interface_descriptor_t* usbd_get_interface_descriptor(usbd_interface_handle p1)
{
	return syscall<e_usbd_get_interface_descriptor, usb_interface_descriptor_t*>(p1);
}
usb_config_descriptor_t* usbd_get_config_descriptor(usbd_device_handle p1)
{
	return syscall<e_usbd_get_config_descriptor, usb_config_descriptor_t*>(p1);
}
usbd_status usbd_set_interface(usbd_interface_handle p1, int p2)
{
	return syscall<e_usbd_set_interface, usbd_status>(p1,p2);
}
usbd_status usbd_get_interface(usbd_interface_handle p1, uint8_t *p2)
{
	return syscall<e_usbd_get_interface, usbd_status>(p1,p2);
}
usb_interface_descriptor_t* usbd_find_idesc(usb_config_descriptor_t *p1, int p2, int p3)
{
	return syscall<e_usbd_find_idesc, usb_interface_descriptor_t*>(p1,p2,p3);
}
const char* usbd_errstr(usbd_status p1)
{
	return syscall<e_usbd_errstr, const char*>(p1);
}
void usbd_devinfo(usbd_device_handle p1, int p2, char *p3)
{
	return syscall<e_usbd_devinfo, void>(p1,p2,p3);
}
usb_endpoint_descriptor_t* usbd_get_endpoint_descriptor(usbd_interface_handle p1, uint8_t p2)
{
	return syscall<e_usbd_get_endpoint_descriptor, usb_endpoint_descriptor_t*>(p1,p2);
}
__attribute__((naked)) int usb_register_driver(int p1, int(*p2[])(device_t), const char* p3, int p4, unsigned int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_usb_register_driver));
}
void* device_get_ivars(device_t p1)
{
	return syscall<e_device_get_softc, void*>(p1);
}
void* device_get_softc(device_t p1)
{
	return syscall<e_device_get_ivars, void*>(p1);
}
int get_event(struct s_ns_event* p1)
{
	return syscall<e_get_event, int>(p1);
}
void send_key_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4)
{
	return syscall<e_send_key_event, void>(p1,p2,p3,p4);
}
void send_click_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4)
{
	return syscall<e_send_click_event, void>(p1,p2,p3,p4);
}
void send_pad_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4)
{
	return syscall<e_send_pad_event, void>(p1,p2,p3,p4);
}
char* getcwd(char* p1, size_t p2)
{
	return syscall<e_getcwd, char*>(p1,p2);
}
int16_t TI_NN_NodeEnumDone(nn_oh_t p1)
{
	return syscall<e_TI_NN_NodeEnumDone, int16_t>(p1);
}
int16_t TI_NN_NodeEnumNext(nn_oh_t p1, nn_nh_t *p2)
{
	return syscall<e_TI_NN_NodeEnumNext, int16_t>(p1,p2);
}
uint32_t TI_NN_GetConnMaxPktSize(nn_ch_t p1)
{
	return syscall<e_TI_NN_GetConnMaxPktSize, uint32_t>(p1);
}
__attribute__((naked)) uint16_t TI_NN_Read(nn_ch_t p1, uint32_t p2, void *p3, uint32_t p4, uint32_t p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_TI_NN_Read));
}
int16_t TI_NN_Write(nn_ch_t p1, void *p2, uint32_t p3)
{
	return syscall<e_TI_NN_Write, int16_t>(p1,p2,p3);
}
int16_t TI_NN_StartService(uint32_t p1, void *p2, void(*p3)(nn_ch_t,void*))
{
	return syscall<e_TI_NN_StartService, int16_t>(p1,p2,p3);
}
int16_t TI_NN_StopService(uint32_t p1)
{
	return syscall<e_TI_NN_StopService, int16_t>(p1);
}
int16_t TI_NN_Connect(nn_nh_t p1, uint32_t p2, nn_ch_t *p3)
{
	return syscall<e_TI_NN_Connect, int16_t>(p1,p2,p3);
}
int16_t TI_NN_Disconnect(nn_ch_t p1)
{
	return syscall<e_TI_NN_Disconnect, int16_t>(p1);
}
int16_t TI_NN_NodeEnumInit(nn_oh_t p1)
{
	return syscall<e_TI_NN_NodeEnumInit, int16_t>(p1);
}
int16_t TI_NN_DestroyOperationHandle(nn_oh_t p1)
{
	return syscall<e_TI_NN_DestroyOperationHandle, int16_t>(p1);
}
nn_oh_t TI_NN_CreateOperationHandle()
{
	return syscall<e_TI_NN_CreateOperationHandle, nn_oh_t>();
}
const char* get_documents_dir()
{
	return syscall<e_get_documents_dir, const char*>();
}
void gui_gc_free(Gc p1)
{
	return syscall<e_gui_gc_free, void>(p1);
}
Gc gui_gc_copy(Gc p1, int p2, int p3)
{
	return syscall<e_gui_gc_copy, Gc>(p1,p2,p3);
}
int gui_gc_begin(Gc p1)
{
	return syscall<e_gui_gc_begin, int>(p1);
}
void gui_gc_finish(Gc p1)
{
	return syscall<e_gui_gc_finish, void>(p1);
}
__attribute__((naked)) void gui_gc_clipRect(Gc p1, int p2, int p3, int p4, int p5, gui_gc_ClipRectOp p6)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_clipRect));
}
void gui_gc_setColorRGB(Gc p1, int p2, int p3, int p4)
{
	return syscall<e_gui_gc_setColorRGB, void>(p1,p2,p3,p4);
}
void gui_gc_setColor(Gc p1, int p2)
{
	return syscall<e_gui_gc_setColor, void>(p1,p2);
}
void gui_gc_setAlpha(Gc p1, gui_gc_Alpha p2)
{
	return syscall<e_gui_gc_setAlpha, void>(p1,p2);
}
void gui_gc_setFont(Gc p1, gui_gc_Font p2)
{
	return syscall<e_gui_gc_setFont, void>(p1,p2);
}
gui_gc_Font gui_gc_getFont(Gc p1)
{
	return syscall<e_gui_gc_getFont, gui_gc_Font>(p1);
}
__attribute__((naked)) void gui_gc_setRegion(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_setRegion));
}
__attribute__((naked)) void gui_gc_drawArc(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_drawArc));
}
__attribute__((naked)) void gui_gc_drawIcon(Gc p1, e_resourceID p2, int p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_drawIcon));
}
void gui_gc_drawSprite(Gc p1, gui_gc_Sprite *p2, int p3, int p4)
{
	return syscall<e_gui_gc_drawSprite, void>(p1,p2,p3,p4);
}
__attribute__((naked)) void gui_gc_drawLine(Gc p1, int p2, int p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_drawLine));
}
__attribute__((naked)) void gui_gc_drawRect(Gc p1, int p2, int p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_drawRect));
}
__attribute__((naked)) void gui_gc_drawString(Gc p1, char *p2, int p3, int p4, gui_gc_StringMode p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_drawString));
}
void gui_gc_drawPoly(Gc p1, unsigned int* p2, unsigned int p3)
{
	return syscall<e_gui_gc_drawPoly, void>(p1,p2,p3);
}
__attribute__((naked)) void gui_gc_fillArc(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_fillArc));
}
void gui_gc_fillPoly(Gc p1, unsigned int *p2, unsigned int p3)
{
	return syscall<e_gui_gc_fillPoly, void>(p1,p2,p3);
}
__attribute__((naked)) void gui_gc_fillRect(Gc p1, int p2, int p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_fillRect));
}
__attribute__((naked)) void gui_gc_fillGradient(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_fillGradient));
}
void gui_gc_drawImage(Gc p1, char *p2, int p3, int p4)
{
	return syscall<e_gui_gc_drawImage, void>(p1,p2,p3,p4);
}
__attribute__((naked)) int gui_gc_getStringWidth(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_getStringWidth));
}
int gui_gc_getCharWidth(Gc p1, gui_gc_Font p2, short p3)
{
	return syscall<e_gui_gc_getCharWidth, int>(p1,p2,p3);
}
__attribute__((naked)) int gui_gc_getStringSmallHeight(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_getStringSmallHeight));
}
int gui_gc_getCharHeight(Gc p1, gui_gc_Font p2, short p3)
{
	return syscall<e_gui_gc_getCharHeight, int>(p1,p2,p3);
}
__attribute__((naked)) int gui_gc_getStringHeight(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_getStringHeight));
}
int gui_gc_getFontHeight(Gc p1, gui_gc_Font p2)
{
	return syscall<e_gui_gc_getFontHeight, int>(p1,p2);
}
__attribute__((naked)) int gui_gc_getIconSize(Gc p1, e_resourceID p2, unsigned int p3, unsigned int *p4, unsigned int *p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_getIconSize));
}
__attribute__((naked)) void gui_gc_blit_gc(Gc p1, int p2, int p3, int p4, int p5, Gc p6, int p7, int p8, int p9, int p10)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_blit_gc));
}
__attribute__((naked)) void gui_gc_blit_buffer(Gc p1, char *p2, int p3, int p4, int p5, int p6)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_gui_gc_blit_buffer));
}
__attribute__((naked)) void read_nand(void* dest, int size, int nand_offset, int unknown, int percent_max, void* progress_cb)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_read_nand));
}
int write_nand(void* p1, int p2, unsigned int p3)
{
	return syscall<e_write_nand, int>(p1,p2,p3);
}
int nand_erase_range(int p1, int p2)
{
	return syscall<e_nand_erase_range, int>(p1,p2);
}
__attribute__((naked)) int TI_MS_evaluateExpr_ACBER(void *p1, void *p2, const uint16_t *p3, void *p4, void *p5)
{
	asm volatile("push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"add r6, r6, #1\n"
				"str lr, [r4, r6, lsl #2]\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"swi %[nr]\n"
				"push {r4-r6}\n"
				"ldr r4, =savedlr_stack\n"
				"ldr r5, =savedlr_stack_nr\n"
				"ldr r6, [r5]\n"
				"ldr lr, [r4, r6, lsl #2]\n"
				"sub r6, r6, #1\n"
				"str r6, [r5]\n"
				"pop {r4-r6}\n"
				"bx lr\n"
				".ltorg" :: [nr] "i" (e_calc_cmd));
}
char* get_res_string(int p1, int p2)
{
	return syscall<e_get_res_string, char*>(p1,p2);
}
void disp_str(const char *p1, int *p2, int p3)
{
	return syscall<e_disp_str, void>(p1,p2,p3);
}
int TI_MS_MathExprToStr(void *p1, void *p2, uint16_t **p3)
{
	return syscall<e_TI_MS_MathExprToStr, int>(p1,p2,p3);
}
}