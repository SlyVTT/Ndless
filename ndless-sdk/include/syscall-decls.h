#ifndef SYSCALL_DECLS
#define SYSCALL_DECLS

//This file has been autogenerated my mkStubs.php

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#include <stddef.h>
#include <stdint.h>
#include <string.h>
#include <ngc.h>
#include <nucleus.h>
#include <lualib.h>
#include <lauxlib.h>
#include <bsdcompat.h>
#include <usb.h>

NUC_FILE* nuc_fopen(const char *p1, const char *p2);
size_t nuc_fread(void *p1, size_t p2, size_t p3, NUC_FILE *p4);
size_t nuc_fwrite(void *p1, size_t p2, size_t p3, NUC_FILE *p4);
int nuc_fclose(NUC_FILE *p1);
char* nuc_fgets(char *p1, int p2, NUC_FILE *p3);
void ascii2utf16(void *p1, const char *p2, int p3);
int TCT_Local_Control_Interrupts(int p1);
int nuc_stat(const char *p1, struct nuc_stat *p2);
int TCC_Terminate_Task(NU_TASK *p1);
int nuc_puts(const char *p1);
int NU_Get_First(struct dstat *p1, const char *p2);
int NU_Get_Next(struct dstat *p1);
void NU_Done(struct dstat *p1);
void show_dialog_box2_(int p1, const char *p2, const char *p3, const char **p4);
int nuc_fseek(NUC_FILE *p1, long p2, int p3);
int NU_Current_Dir(const char *p1, const char *p2);
int NU_Set_Current_Dir(const char *p1);
int touchpad_read(unsigned char p1, unsigned char p2, void *p3);
int touchpad_write(unsigned char p1, unsigned char p2, void *p3);
NU_TASK* TCC_Current_Task_Pointer();
long nuc_ftell(NUC_FILE *p1);
PCFD NU_Open(char *p1, uint32_t p2, uint32_t p3);
int NU_Close(PCFD p1);
int NU_Truncate(PCFD p1, long int p2);
int _show_msgbox_2b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, const char **p8);
int _show_msgbox_3b(int p1, const char *p2, const char *p3, const char *p4, int p5, const char *p6, int p7, const char *p8, int p9, const char **p10);
NUC_DIR* nuc_opendir(const char *p1);
struct nuc_dirent* nuc_readdir(NUC_DIR *p1);
int nuc_closedir(NUC_DIR *p1);
void luaL_register(lua_State *p1, const char *p2, const luaL_Reg *p3);
const char* luaL_checklstring(lua_State *p1, int p2, size_t *p3);
int luaL_error(lua_State *p1, const char *fmt, ...);
int luaL_getmetafield(lua_State *p1, int p2, const char *p3);
int luaL_callmeta(lua_State *p1, int p2, const char *p3);
int luaL_typerror(lua_State *p1, int p2, const char *p3);
int luaL_argerror(lua_State *p1, int p2, const char *p3);
const char* luaL_optlstring(lua_State *p1, int p2, const char *p3, size_t *p4);
lua_Number luaL_checknumber(lua_State *p1, int p2);
lua_Number luaL_optnumber(lua_State *p1, int p2, lua_Number p3);
lua_Integer luaL_checkinteger(lua_State *p1, int p2);
lua_Integer luaL_optinteger(lua_State *p1, int p2, lua_Integer p3);
void luaL_checkstack(lua_State *p1, int p2, const char *p3);
void luaL_checktype(lua_State *p1, int p2, int p3);
void luaL_checkany(lua_State *p1, int p2);
int luaL_newmetatable(lua_State *p1, const char *p2);
void* luaL_checkudata(lua_State *p1, int p2, const char *p3);
void luaL_where(lua_State *p1, int p2);
int luaL_checkoption (lua_State *p1, int p2, const char *p3, const char *const p4[]);
int luaL_ref(lua_State *p1, int p2);
void luaL_unref(lua_State *p1, int p2, int p3);
int luaL_loadfile(lua_State *p1, const char *p2);
int luaL_loadbuffer(lua_State *p1, const char *p2, size_t p3, const char *p4);
int luaL_loadstring(lua_State *p1, const char *p2);
lua_State* luaL_newstate();
const char* luaL_gsub (lua_State *p1, const char *p2, const char *p3, const char *p4);
const char* luaL_findtable(lua_State *p1, int p2, const char *p3, int p4);
void luaL_buffinit(lua_State *p1, luaL_Buffer *p2);
char* luaL_prepbuffer(luaL_Buffer *p1);
void luaL_addlstring(luaL_Buffer *p1, const char *p2, size_t p3);
void luaL_addstring(luaL_Buffer *p1, const char *p2);
void luaL_addvalue(luaL_Buffer *p1);
void luaL_pushresult(luaL_Buffer *p1);
lua_State* lua_newstate(lua_Alloc p1, void *p2);
void lua_close(lua_State *p1);
lua_State* lua_newthread(lua_State *p1);
lua_CFunction lua_atpanic(lua_State *p1, lua_CFunction p2);
int lua_gettop(lua_State *p1);
void lua_settop(lua_State *p1, int p2);
void lua_pushvalue(lua_State *p1, int p2);
void lua_remove(lua_State *p1, int p2);
void lua_insert (lua_State *p1, int p2);
void lua_replace(lua_State *p1, int p2);
int lua_checkstack(lua_State *p1, int p2);
void lua_xmove(lua_State *p1, lua_State *p2, int p3);
int lua_isnumber(lua_State *p1, int p2);
int lua_isstring(lua_State *p1, int p2);
int lua_iscfunction(lua_State *p1, int p2);
int lua_isuserdata(lua_State *p1, int p2);
int lua_type(lua_State *p1, int p2);
const char* lua_typename(lua_State *p1, int p2);
int lua_equal(lua_State *p1, int p2, int p3);
int lua_rawequal(lua_State *p1, int p2, int p3);
int lua_lessthan(lua_State *p1, int p2, int p3);
lua_Number lua_tonumber(lua_State *p1, int p2);
lua_Integer lua_tointeger(lua_State *p1, int p2);
int lua_toboolean(lua_State *p1, int p2);
const char* lua_tolstring(lua_State *p1, int p2, size_t *p3);
size_t lua_objlen(lua_State *p1, int p2);
lua_CFunction lua_tocfunction(lua_State *p1, int p2);
void* lua_touserdata(lua_State *p1, int p2);
lua_State* lua_tothread(lua_State *p1, int p2);
const void* lua_topointer(lua_State *p1, int p2);
void lua_pushnil(lua_State *p1);
void lua_pushnumber(lua_State *p1, lua_Number p2);
void lua_pushinteger(lua_State *p1, lua_Integer p2);
void lua_pushlstring(lua_State *p1, const char *p2, size_t p3);
void lua_pushstring(lua_State *p1, const char *p2);
const char* lua_pushfstring(lua_State *p1, const char *p2, ...);
void lua_pushcclosure(lua_State *p1, lua_CFunction p2, int p3);
void lua_pushboolean(lua_State *p1, int p2);
void lua_gettable(lua_State *p1, int p2);
void lua_getfield(lua_State *p1, int p2, const char *p3);
void lua_rawget(lua_State *p1, int p2);
void lua_rawgeti(lua_State *p1, int p2, int p3);
void lua_createtable(lua_State *p1, int p2, int p3);
void* lua_newuserdata(lua_State *p1, size_t p2);
int lua_getmetatable(lua_State *p1, int p2);
void lua_getfenv(lua_State *p1, int p2);
void lua_settable (lua_State *p1, int p2);
void lua_setfield(lua_State *p1, int p2, const char *p3);
void lua_rawset(lua_State *p1, int p2);
void lua_rawseti(lua_State *p1, int p2, int p3);
int lua_setmetatable(lua_State *p1, int p2);
int lua_setfenv(lua_State *p1, int p2);
void lua_call(lua_State *p1, int p2, int p3);
int lua_pcall(lua_State *p1, int p2, int p3, int p4);
int lua_cpcall(lua_State *p1, lua_CFunction p2, void *p3);
int lua_load(lua_State *p1, lua_Reader p2, void *p3, const char *p4);
int lua_dump(lua_State *p1, lua_Writer p2, void *p3);
int lua_yield(lua_State *p1, int p2);
int lua_resume(lua_State *p1, int p2);
int lua_status(lua_State *p1);
int lua_gc(lua_State *p1, int p2, int p3);
int lua_error(lua_State *p1);
int lua_next (lua_State *p1, int p2);
void lua_concat(lua_State *p1, int p2);
int lua_getstack(lua_State *p1, int p2, lua_Debug *p3);
void refresh_homescr();
void refresh_docbrowser(int p1);
void utf162ascii(char *p1, const uint16_t *p2, int p3);
size_t utf16_strlen(const uint16_t *p1);
int _show_1NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8);
int _show_2NumericInput(int p1, const char *p2, const char *p3, const char *p4, int *p5, int p6, int p7, int p8, const char *p9, int *p10, int p11, int p12, int p13);
int _show_msgUserInput(int p1, String *p2, const char *p3, const char *p4);
String string_new();
void string_free(String p1);
char* string_to_ascii(String p1);
void string_lower(String p1);
char string_charAt(String p1, int p2);
int string_concat_utf16(String p1, const char* p2);
int string_set_ascii(String p1, const char *p2);
int string_set_utf16(String p1, const char *p2);
int string_indexOf_utf16(String p1, int p2, const char *p3);
int string_last_indexOf_utf16(String p1, int p2, const char *p3);
int string_compareTo_utf16(String p1, const char *p2);
char* string_substring(String p1, String p2, int p3, int p4);
void string_erase(String p1, int p2);
void string_truncate(String p1, int p2);
char* string_subtrsing_utf16(String p1, const char *p2, int *p3);
int string_insert_replace_utf16(String p1, const char *p2, int p3, int p4);
int string_insert_utf16(String p1, const char *p2, int p3);
int string_sprintf_utf16(String p1, const char *fmt, ...);
usbd_status usbd_open_pipe(usbd_interface_handle p1, uint8_t p2, uint8_t p3, usbd_pipe_handle *p4);
usbd_status usbd_close_pipe(usbd_pipe_handle p1);
usbd_status usbd_transfer(usbd_xfer_handle p1);
usbd_xfer_handle usbd_alloc_xfer(usbd_device_handle p1);
usbd_status usbd_free_xfer(usbd_xfer_handle p1);
void usbd_setup_xfer(usbd_xfer_handle p1, usbd_pipe_handle p2, usbd_private_handle p3, void *p4, uint32_t p5, uint16_t p6, uint32_t p7, usbd_callback p8);
void usbd_setup_isoc_xfer(usbd_xfer_handle p1, usbd_pipe_handle p2, usbd_private_handle p3, uint16_t *p4, uint32_t p5, uint16_t p6, usbd_callback p7);
void usbd_get_xfer_status(usbd_xfer_handle p1, usbd_private_handle *p2, void **p3, uint32_t *p4, usbd_status *p5);
usb_endpoint_descriptor_t* usbd_interface2endpoint_descriptor(usbd_interface_handle p1, uint8_t p2);
usbd_status usbd_abort_pipe(usbd_pipe_handle p1);
usbd_status usbd_clear_endpoint_stall(usbd_pipe_handle p1);
usbd_status usbd_endpoint_count(usbd_interface_handle p1, uint8_t *p2);
usbd_status usbd_interface_count(usbd_device_handle p1, uint8_t *p2);
usbd_status usbd_interface2device_handle(usbd_interface_handle p1, usbd_device_handle *p2);
usbd_status usbd_device2interface_handle(usbd_device_handle p1, uint8_t p2, usbd_interface_handle *p3);
usbd_status usbd_pipe2device_handle(usbd_pipe_handle p1);
usbd_status usbd_sync_transfer(usbd_xfer_handle p1);
usbd_status usbd_open_pipe_intr(usbd_interface_handle p1, uint8_t p2, uint8_t p3, usbd_pipe_handle *p4, usbd_private_handle p5, void *p6, uint32_t *p8, usbd_callback p9, int p10);
usbd_status usbd_do_request(usbd_device_handle p1, usb_device_request_t *p2, void *p3);
usbd_status usbd_do_request_flags(usbd_device_handle p1, usb_device_request_t *p2, void *p3, uint16_t p4, int *p5);
usbd_status usbd_do_request_flags_pipe(usbd_device_handle p1, usbd_pipe_handle p2, usb_device_request_t *p3, void *p4, uint16_t p5, int *p6);
usb_interface_descriptor_t* usbd_get_interface_descriptor(usbd_interface_handle p1);
usb_config_descriptor_t* usbd_get_config_descriptor(usbd_device_handle p1);
usbd_status usbd_set_interface(usbd_interface_handle p1, int p2);
usbd_status usbd_get_interface(usbd_interface_handle p1, uint8_t *p2);
usb_interface_descriptor_t* usbd_find_idesc(usb_config_descriptor_t *p1, int p2, int p3);
const char* usbd_errstr(usbd_status p1);
void usbd_devinfo(usbd_device_handle p1, int p2, char *p3);
usb_endpoint_descriptor_t* usbd_get_endpoint_descriptor(usbd_interface_handle p1, uint8_t p2);
int usb_register_driver(int p1, int(*p2[])(device_t), const char* p3, int p4, unsigned int p5);
void* device_get_ivars(device_t p1);
void* device_get_softc(device_t p1);
int get_event(struct s_ns_event* p1);
void send_key_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4);
void send_click_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4);
void send_pad_event(struct s_ns_event* p1, unsigned short p2, BOOL p3, BOOL p4);
char* getcwd(char* p1, size_t p2);
int16_t TI_NN_NodeEnumDone(nn_oh_t p1);
int16_t TI_NN_NodeEnumNext(nn_oh_t p1, nn_nh_t *p2);
uint32_t TI_NN_GetConnMaxPktSize(nn_ch_t p1);
uint16_t TI_NN_Read(nn_ch_t p1, uint32_t p2, void *p3, uint32_t p4, uint32_t p5);
int16_t TI_NN_Write(nn_ch_t p1, void *p2, uint32_t p3);
int16_t TI_NN_StartService(uint32_t p1, void *p2, void(*p3)(nn_ch_t,void*));
int16_t TI_NN_StopService(uint32_t p1);
int16_t TI_NN_Connect(nn_nh_t p1, uint32_t p2, nn_ch_t *p3);
int16_t TI_NN_Disconnect(nn_ch_t p1);
int16_t TI_NN_NodeEnumInit(nn_oh_t p1);
int16_t TI_NN_DestroyOperationHandle(nn_oh_t p1);
nn_oh_t TI_NN_CreateOperationHandle();
const char* get_documents_dir();
void gui_gc_free(Gc p1);
Gc gui_gc_copy(Gc p1, int p2, int p3);
int gui_gc_begin(Gc p1);
void gui_gc_finish(Gc p1);
void gui_gc_clipRect(Gc p1, int p2, int p3, int p4, int p5, gui_gc_ClipRectOp p6);
void gui_gc_setColorRGB(Gc p1, int p2, int p3, int p4);
void gui_gc_setColor(Gc p1, int p2);
void gui_gc_setAlpha(Gc p1, gui_gc_Alpha p2);
void gui_gc_setFont(Gc p1, gui_gc_Font p2);
gui_gc_Font gui_gc_getFont(Gc p1);
void gui_gc_setRegion(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9);
void gui_gc_drawArc(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7);
void gui_gc_drawIcon(Gc p1, e_resourceID p2, int p3, int p4, int p5);
void gui_gc_drawSprite(Gc p1, gui_gc_Sprite *p2, int p3, int p4);
void gui_gc_drawLine(Gc p1, int p2, int p3, int p4, int p5);
void gui_gc_drawRect(Gc p1, int p2, int p3, int p4, int p5);
void gui_gc_drawString(Gc p1, char *p2, int p3, int p4, gui_gc_StringMode p5);
void gui_gc_drawPoly(Gc p1, unsigned int* p2, unsigned int p3);
void gui_gc_fillArc(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7);
void gui_gc_fillPoly(Gc p1, unsigned int *p2, unsigned int p3);
void gui_gc_fillRect(Gc p1, int p2, int p3, int p4, int p5);
void gui_gc_fillGradient(Gc p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8);
void gui_gc_drawImage(Gc p1, char *p2, int p3, int p4);
int gui_gc_getStringWidth(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5);
int gui_gc_getCharWidth(Gc p1, gui_gc_Font p2, short p3);
int gui_gc_getStringSmallHeight(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5);
int gui_gc_getCharHeight(Gc p1, gui_gc_Font p2, short p3);
int gui_gc_getStringHeight(Gc p1, gui_gc_Font p2, char *p3, int p4, int p5);
int gui_gc_getFontHeight(Gc p1, gui_gc_Font p2);
int gui_gc_getIconSize(Gc p1, e_resourceID p2, unsigned int p3, unsigned int *p4, unsigned int *p5);
void gui_gc_blit_gc(Gc p1, int p2, int p3, int p4, int p5, Gc p6, int p7, int p8, int p9, int p10);
void gui_gc_blit_buffer(Gc p1, char *p2, int p3, int p4, int p5, int p6);
void read_nand(void* dest, int size, int nand_offset, int unknown, int percent_max, void* progress_cb);
int write_nand(void* p1, int p2, unsigned int p3);
int nand_erase_range(int p1, int p2);
int TI_MS_evaluateExpr_ACBER(void *p1, void *p2, const uint16_t *p3, void *p4, void *p5);
char* get_res_string(int p1, int p2);
void disp_str(const char *p1, int *p2, int p3);
int TI_MS_MathExprToStr(void *p1, void *p2, uint16_t **p3);
#ifdef __cplusplus
}
#endif // __cplusplus

#endif // !SYSCALL_DECLS
